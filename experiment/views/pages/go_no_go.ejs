<!doctype html>
<html>
  <head>
    <title>Psychology Experiment</title>

    <!-- Load general-purpose javascript libraries we want to use. -->
    <script src="js/jquery.js"></script>
    <script src="js/showdown.js"></script>
    
    <!-- Load jsPsych and the plugins we want to use. -->
    <script src="jspsych/jspsych.js"></script>
    <script src="jspsych/plugins/jspsych-text.js"></script>
    <script src="jspsych/plugins/jspsych-single-stim.js"></script>
    
    <!-- Load our own library of utility functions. -->
    <script src="js/utils.js"></script>

    <!-- Stylesheets. -->
    <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
    <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
    <link href="css/experiment.css" rel="stylesheet" type="text/css"></link>
  </head>

  <!-- We only need to one div element. JsPsych dynamically generates
       the html for each section of the experiment -->
  <body>
    <div id="jspsych_target"></div>
  </body>

  <!-- Define the experiment in JavaScript. -->
  <script>


    ///////////
    // Setup //
    ///////////
    console.log('Initializing go/no-go experiment.')

    const {condition, images, connected} = <%- PARAMS %>;
    if (connected) console.log('Connected to database.')
    else console.log('NOT Connected to database!!')
    const N_TRIAL = 4;
  
    // This ensures that images appear exactly when we tell them to.
    jsPsych.pluginAPI.preloadImages(images);

    // To avoid repeating ourselves,  we create a variable for a piece
    // of html that we use multiple times.
    var anykey = "<div class='center-content'><b>Press any key to continue.</b></div";


    //////////////////
    // Instructions //
    //////////////////

    var welcome_block = {
      type: "text",
      // We use the handy markdown function (defined in utils.js) to format our text.
      text: markdown(`
      # My Sweet Experiment

      This is a reworked version of the go/no-go task constructed in a
      [tutorial](http://docs.jspsych.org/tutorials/rt-task/) 
      on the jsPsych website. Note that the code here is a little different
      than the original.

      Specifically, the code here is better. ðŸ˜‰

      ${anykey}
      `)
      // text: markdown(
      //   `# Welcome

      //   This is a reworked version of the go/no-go task constructed in a
      //   [tutorial](http://docs.jspsych.org/tutorials/rt-task/) 
      //   on the jsPsych website. Note that the code here is a little different
      //   than the original.

      //   Specifically, the code here is better ðŸ˜‰.

      //   ${anykey}
      // `)

    };

    var instructions_block = {
      type: "text",
      // Sometimes we do need the additional control of html.
      // We can mix markdown with html, but you can't use markdown
      // inside an html element, which is why we use <b>html bold tags</b> 
      // instead of the prettier **markdown format**.
      text: markdown(`
        # Instructions

        In this experiment, a circle will appear in the center 
        of the screen. If the circle is **blue**, 
        press the letter F on the keyboard as fast as you can.
        If the circle is **orange**, do not press 
        any key.
        
        <div class='left center-content'>
          <img src='img/blue.png'></img>
          <p><b>Press the F key</b></p>
        </div>
        <div class='right center-content'>
          <img src='img/orange.png'></img>
          <p><b>Do not press a key</b></p>
        </div>

        ${anykey}
      `),
      timing_post_trial: 2000
    };

    /////////////////
    // Test trials //
    /////////////////

    var test_stimuli = [
      {
        stimulus: "img/blue.png",
        data: { response: 'go' }
      },
      {
        stimulus: "img/orange.png",
        data: { response: 'no-go' }
      }
    ];

    var all_trials = jsPsych.randomization.repeat(test_stimuli, Math.floor(N_TRIAL / 2));

    var test_block = {
      type: "single-stim",
      choices: ['F'],
      timing_response: 1500,
      timeline: all_trials,
      timing_post_trial() {
        // We want the time between trials to vary. To accomplish
        // this, we define the timing_post_trial parameter as a 
        // function rather than a single value. The function is
        // executed separaetly on each trial, resulting in different
        // random times.
        return Math.floor(Math.random() * 1500) + 750;
      },
    };

    function getAverageResponseTime() {

      var trials = jsPsych.data.getTrialsOfType('single-stim');

      var sum_rt = 0;
      var valid_trial_count = 0;
      for (var i = 0; i < trials.length; i++) {
        if (trials[i].response == 'go' && trials[i].rt > -1) {
          sum_rt += trials[i].rt;
          valid_trial_count++;
        }
      }
      return Math.floor(sum_rt / valid_trial_count);
    }

    var debrief_block = {
      type: "text",
      // We don't want to
      text() {
        return `
          Your average response time was ${getAverageResponseTime()}.
          Press any key to complete the experiment. Thanks!
        `
      }
    };


    /////////////////////////
    // Experiment timeline //
    /////////////////////////

    // `timeline` determines the high-level structure of the
    // experiment. When developing the experiment, you
    // can comment out blocks you aren't working on
    // so you don't have to click through them to test
    // the section you're working on.
    var timeline = [
      welcome_block,
      instructions_block,
      test_block,
      debrief_block,
    ];


    /////////////////////////
    // JsPsych boilerplate //
    /////////////////////////

    jsPsych.init({
      display_element: $('#jspsych_target'),
      timeline: timeline,
      on_finish: function() {
        $.ajax({
          type: "POST",
          url: "/experiment-data",
          data: JSON.stringify(jsPsych.data.getData()),
          contentType: "application/json",
        })
        .done(function() {
          console.log('done')
          // window.location.href = "finish";
        })
        .fail(function() {
          console.log('fail')
          // alert("A problem occurred while writing to the database. Please contact the researcher for more information.")
          // window.location.href = "/";
        })
      }
    });
  </script>
</html>